<?
	return help($argv $argc):

	function help($argv, $argc) {
		$hotkeys['ru'] = [
			 'Esc'					=> 'Очистить экран и строку ввода команд'
			,'Ctrl + Enter'			=> 'Показать/скрыть окно ввода команд в котором вы сейчас находитесь'
			,'Enter'				=> 'Отправить команду на сервер для выполнения (POST)'
			,'Ctrl + H'				=> 'Показать это руководство'
		];
		$hotkeys['en'] = [
			 'Esc'					=> 'Clear screen and input line'
			,'Ctrl + Enter'			=> 'Toggle command window'
			,'Enter'				=> 'Send command to server for processing (post method only)'
			,'Ctrl + H'				=> 'Show this manual'
		];

		$commands['arguments'] = [
			 'help'			=> '[$command]'
			,'auth'			=> '$email $pass'
			,'reg'			=> '$email $pass [$nickname]'
			,'exit'			=> ''
			,'aliases'		=> '$command'
			,'about'		=> '[$command]'
			,'unreg'		=> '$email $pass [$nickname]'
			,'epigraph'		=> '[$id]'
			,'names'		=> ''

			,'add'			=> '$arg1 $arg2 $arg3 [$arg4] [$arg5] [$arg6]'
			,'cat'			=> '$file'
			,'message'		=> '$user $subject $message'
			,'tail'			=> '$n $file'
			,'date'			=> '[$format]'
			,'cal'			=> '[$year]'
			,'get'			=> '$obj $info'
			,'select'		=> 'mail'
			,'cd'			=> '[$dir]'
			,'pwd'			=> ''
			,'ls'			=> '[$dir]'
			,'tree'			=> '[$dir]'
			,'source'		=> '$command'
			,'rename'		=> '$oldname $newname'
			,'copy'			=> '$file $copyname'
			,'eval'			=> '$code'
			,'chmod'		=> '$file $mode.'
			,'zip'			=> '$source_path $destination_path'
			,'unzip'		=> '$source_archive $destination_path [$file1 $file2 $fileN]'
			,'history'		=> ''
			,'create_backup'=> ''
			,'dump'			=> ''
			,'killallprocesses'=> ''

			,'user'			=> '$user_id $act $param'
			,'permission'	=> '$user_id $key $value'
			,'group'		=> ''
		];

		# язык первичен перед уровнем доступа. сначала определяется язык пользователя, затем его статус. (то что в приватбанковском corezoid названо состояниями давно было здесь реализовано и состояние языка определяется первично и в зависимости от языка этого процессы делятся по состояниям уровня доступа и так далее)
		# в зависимости от уровня доступа перечень комманд будет отличаться.

		$commands['summary']['ru']['ghost'] = [
			 'help'		=> 'Вызов этой справки'
			,'auth'		=> 'Авторизация в системе. Эта команда относится к командам со вводом пароля. Такие команды проводятся в два этапа: 1. Ввод команды со всеми параметрами и отправка на исполнение (Enter). 2. Ввод и отправка пароля (пароль при вводе отображаться не будет)'
			,'reg'		=> 'Регистрация нового пользователя, некорректная запись email воспринимается как nickname, при этом символ @ вырезается, если он был включен. Эта команда относится к командам со вводом пароля, см. `about auth`'
			,'unreg'	=> 'Удалить свою учётную запись пользователя, требуется указать свой пароль также как и при регистрации/авторизации. Польностью удаляет все данные пользователя из системы'
			,'exit'		=> 'Обратный авторизации процесс, переход в режим стороннего наблюдателя (ghost-статус. Всего на сайте сейчас три статуса: ghost, staff, admin. Неавторизованные пользователи имеют статус ghost, авторизованные staff или admin, разница между которыми лишь в том, что admin может выполнять действия с профилями участников staff'
			,'aliases'	=> 'Посмотреть все возможные синонимы (алиасы) команды'
			,'about'	=> 'Посмотреть справку по конкретному скрипту (на самом деле это псевдоним команды help)'
			,'lang'		=> 'Указать предпочтительный язык'
			,'epigraph'	=> 'Выводит случайную цитату или цитату с номером $id (для использования в качестве эпиграфа, но впринципе не только)'
			,'names'	=> 'Выводит список мужских и женских русских имён'
		];
		$commands['summary']['en']['ghost'] = [
			 'help'		=> 'This tutorial'
			,'auth'		=> 'User authorization'
			,'reg'		=> 'User registration'
			,'reg'		=> 'User unregistration'
			,'exit'		=> 'Sign out from site, session_destroy()'
			,'aliases'	=> 'Get command aliases'
			,'about'	=> 'Get command manual (alias for help)'
			,'lang'		=> 'Set language'
			,'epigraph'	=> 'Get random/$id-th epigraph'
			,'names'	=> 'Output russian names'
		];

		$commands['summary']['ru']['staff'] = [
			 'add'		=> 'Просто приведу примеры использования команды: `add hotkey "Ctrl + V" paste`, `add hotkey Ctrl+L ls`, `add alias pro about`, `add user test@test.com qwerty123`. Данная команда первая и пока единственная оснащена синтаксическим сахаром (можно ввести `add new alias "my_alias_name" for command help` или `add user alex with password qwerty321` и несколько ещё вариантов в том же духе)'
			,'cat'		=> 'RU: Вывести содержимое файла. Синтаксис: cat $file. EN: print $file content'
			,'message'	=> 'RU: Отправляет письмо пользователю $user с темой $subject. Синтаксис: message $user $subject $message. Отправленное письмо может быть прочитано любым ридером из репозитория. EN: send message to $user'
	#		,'tac $file'					=> '$file get content from last line to first'	# from last line to first
	#		,'more'							=> 'RU: Намеченная утилита постраничного просмотра текстового файла. Синтаксис: more $file. $file get content page to page'	# must be page to page
	#		,'less $file'					=> '$file get content page to page and scroll'	# must be page to page and scoll top and bottom
	#		,'head'							=> 'RU: Выводит $n первых строк файла $file. Синтаксис: head $n $file. EN: Show $n first lines of $file (if $n more then file kept lines, show all file content)'
			,'tail'		=> 'RU: Выводит $n последних строк файла $file. Синтаксис: tail $n $file. show $n last lines of $file.'
	#		,'_upload'						=> 'upload files to the server. (post no command)'
	#		,'_downoad'						=> 'upload files to the server. (post no command)'
	#		,'fa'							=> 'RU: Добавляет строку $line в файл $file. Синтаксис: fa $file $line. append $line to $file ($line must no kept spaces now)'
	#		,'_mail'						=> 'send email to admin. (post no command)'
	#		,'timezone [$from_UTC]'			=> 'RU: Устанавливает часовой пояс (временную зону). Cинтаксис: timezone [$from_UTC]. EN: set your local timezone or set difference between UTC'
			,'date'		=> 'RU: Выводит текущую дату, время и часовой пояс (селектором, позволяющим его изменить) в заданном формате. Синтаксис: date [$format]. EN: Show current date and time or set the $format of date'
			,'cal'		=> 'RU: Выводит календарь на $year год (по умолчанию на текущий год). EN: show calendar on YYYY year'
			,'source'	=> 'Выводит исходный код исполняемого файла программы'
			,'get'		=> 'RU: Выводит запрошенную информацию $info об объекте $obj. Синтаксис: get $obj $info. Примеры: get my nickname, get my status, get my email, get my id, get new dump, get last dump'
			,'select'	=> 'RU: Команда для получения данных из БД. На данный момент полный функционал не реализован, стоит плашка select mail для выборки LIMIT 50 последних непрочитанных писем.'
	#		,'calc'							=> 'RU: Запускает калькулятор прямо в командной строке. Синтаксис: calc.'
	#		,'default [$command]'			=> 'return default settings of date, timezone etc'
	#		,'site off'						=> 'block site to view'
	#		,'site on'						=> 'unblock site to view'
			,'cd'		=> 'RU: Устанавливает $dir текущей директорией. Если $dir не указана делает текущим корневой каталог (каталог, в который установлен движок). Синтаксис: cd [$dir]. Посмотреть текущий каталог можно командой pwd. EN: go to home dir or change dir to [..|../..|-|/dir|dir/dir|~user]'
			,'pwd'		=> 'RU: Выводит текущий каталог. EN: present working directory.'
			,'ls'		=> 'RU: Выводит список файлов и папок в директории $dir (если не указано, то содержимое текущей директории). Синтаксис: ls [$dir] EN: Show content of current dir with some $regular expression or options'
			,'tree'		=> 'RU: Выводит дерево файлов и каталогов в директории $dir. Синтаксис: tree [$dir]. EN: show files tree from /'
	#		,'mkdir'	=> 'Syntax: mkdir $dir [$dir2 [$dir3]]. make $dir (or few dirs)'
	#		,'rm, remove $file'				=> 'remove file'
	#		,'rmdir [$recursive]'			=> 'remove empty dir or dir with all content'
			,'rename'		=> 'RU: Пытается переименовать файл или директорию $oldname в $newname, переместив в конечную директорию, если необходимо. Если $newname существует, то он будет перезаписан. Синтаксис: rename $oldname $newname. EN: rename $oldname to $newname'
			,'copy'		=> 'RU: Создаёт копию файла $file с именем $copyname. Не забывайте, что второй параметр содержит не только путь, куда сохранить копию файла, но и содержит новое имя создаваемой копии! Синтаксис: copy $file $copyname. EN: copy file $from to file $to'
	#		,'find, whereis, which'			=> 'search of files and dir'
			,'eval'		=> 'Временное решение нехватки функционала путём дыры в уязвимости - все недостающие команды можно выполнить через eval. Но при каждом применении не забывайте создать скрипт, который решает ту же задачу и тогда нехватка функционала быстро ликвидируется и можно будет не прибегать к прямому выполнени кода, достаточно будет использовать внутренне API. Подсказака: можно использовать eval также в качестве калькулятора, достаточно начать ввод с eval echo и можно писать любую математическую операцию на PHP, например: eval echo pow(398/4, 2);'
			,'chmod'						=> 'Осуществляет попытку изменения режима доступа файла $file на режим $mode. Синтаксис: chmod $file $mode.'
	#		,'attr'							=> 'files attributes'
			,'zip'		=> 'RU: Создает в произвольной директории архив из заданного файла или директории, после создания архив отправляет на скачивание. Известный баг: архив создается корректно из файла, но из папки создаётся пустой архив.'
			,'unzip'	=> 'RU: Распаковывает содержимое архива pwd().$zip_archive.zip в директорию pwd().$destination (по умолчанию текущая директория). Если указаны дополнительные параметры $file1, $file2..$fileN то распакует только перечисленные файлы.'
			,'killallprocesses'	=> 'RU: Собственно, название говорит само за себя: принудительно завершает все процессы.'
			,'history'	=> 'RU: Выводит историю всех введённых команд всеми пользователями. Позже будут добавлены параметры и проверки, чтобы выводить для указанного/текущего пользователя. Из списка удаляются дубли команд, пустые строки, некорректные команды записываются в отдельный лог и не выводятся здесь. Все команды сортируются и выводится первое вхождение команды, если требуется посмотреть историю без изменений, вводите cat ' . $site['cmd_log']
	#		,'rpm'							=> 'package manager'
	#		,'yum'							=> 'update manager'
	#		,'dpkg'							=> 'developer manager'
	#		,'apt'							=> ''
	#		,'string'						=> 'processing of strings'
	#		,'array'						=> 'processing of arrays'
	#		,'file'							=> 'processing of files'	# etc
			,'create_backup'	=> 'RU: Создает в папке  архив с дампом базы и файлами всего сайта (полный бекап), после создания архив отправляет на скачивание.'
			,'dump'		=> 'Создание дампа текущей базы данных. Дамп создаётся в текущем каталоге. Просмотр содержимого последнего созданного дампа: `get last dump`. Создание дампа с просмотром содержимого в консоли: `get new dump`'
	#		,'shell'		=> 'RU: прмой запуск произвольной команды терминала. Почему то не очень я заметил работу, только если shell echo...'
	#		,'pid'			=> 'pid, cloud, puddle. manipulate with clouds and puddle (processes)'
		];
		$commands['summary']['ru']['staff'] = array_merge($commands['summary']['ru']['ghost'], $commands['summary']['ru']['staff']);

		$commands['summary']['ru']['admin'] = [
			 'permission'	=> 'Устанавливает параметр доступа $key в значение $value для пользователя с ID $user_id'
			,'user'			=> 'Выполняет действие $act с пользователем $user_id. Позволяет выполнить блокировку пользователей, удалять пользователей, менять их профили и т.п.'
			,'group'		=> 'Выполняет операции над пользовательскими группами'
		];
		$commands['summary']['en']['admin'] = [
			 'user'			=> 'Manipulations of users'
			,'group'		=> 'Manipulations of users group'
			,'permission'	=> 'Manipulations of users permissions'
		];
		$commands['summary']['ru']['admin'] = array_merge($commands['summary']['ru']['staff'], $commands['summary']['ru']['admin']);

		if (!$argv[1]) {
			$return .= 'Добро пожаловать в Adeptx Driver!

	Этот туториал призван помочь вам сориентироваться на самом начальном этапе. Ниже приведён список самых основных команд, с кратким описанием предназначения скрипта. Чтобы унать информацию о конкретной команде есть команда `about $command_name` (где $command_name = имя скрипта, например `about aliases`).

	Команды можно использовать как прямо в этой оболочке, так и вызывать в своих скриптах или программах через встроенную команду run($command_with_arguments_string) или подлключив исполняемый файл команды в свои проекты через include_once/require_once (once - потому что в этом файле объявляется функция, повторное обьявление приведет к ошибке), после подключения в любое удобное время вызвав функцию с соответствующим названием.

	Многие команды имеют синонимы для того, чтобы упростить запоминание и уменьшить количество ошибок при вводе. Однако рекомендуется всё же использовать оригинальное имя команды при вызове, это поможет избежать некоторых возможных недочетов.

	Для начала работы, первое что можно сделать - зарегистрироваться. Для этого выполните `reg $email $password`. После регистрации вы будете автоматически авторизованы. В дальнейшем вам необходимо будет авторизовываться самостоятельно используя команду `auth $login $password`, когда это необходимо (при открытии сайта на новом устройстве, истечения срока дейтсвия сессий и т.п.; $login это ваш $email или $nickname указанные при регистрации или позже) для того чтобы вытянуть из базы данных информацию о сессии и всё что связано с персонализацией системы и получить больше возможностей для выполнения команд. Всё, что необходимо запомнить о сессии и вашем профиле будет записываться в базу данных по возможности или вы можете обращаться к базе данных вручную.

	Каждый пользователь получает в распоряжение свою собственную базу данных `adeptx_user$USERID_customdb` (для доступа к ней вам не придётся указывать всё это, вы можете обращаться к ней через ~ или вообще не упоминая, по умолчанию всегда подразумевается, что вы обращаетесь в этой базе данных, если из контекста не следует иное) с персональными таблицами и полный доступ к своей базе данных. Кроме того, предоставленный доступ к публичным базам данных позволяет обращаться к расшаренным таблицам и другим пользователям (по установленным правилам: только для чтения или чтение и запись...).
	Также дела обстоят и с файлами, каждый пользователь получает в распоряжение свою папку и так далее. Кроме того в вашем распоряжении общий репозиторий файлов и скриптов, вы можете добавлять в него свои удачные скрипты, выкладывая их в общий доступ, помогая другим своими разработками. Также для выполнения доступны многие команды linux-терминала, только выполнение всех этих функций ограничено только вашим рабочим каталогом выделенной вам базой данных, за исключением комманд обращения к общедоступным директориям и базам, в частности репозиторию. Пытаясь достучаться до каталогов более высокого уровня через ../ вы получите ошибку безопасности. Разумеется, при таком наборе функциональности, ни о какой безопасности не может идти и речи, хоть мы и стараемся максимально свести на нет возможные уязвимости. Так что обход этих ограничений тем или иным методом всё равно доступен, но помните, что подобное поведение вредит другим пользователям, поэтому за проделки вы будете забанены с удалением всех ваших данных.
	Вот поэтому не забывайте делать бекапы своих данных и сохранять их в безопасном от уязвимостей месте, повышать разными средствами безопасность данных и делясь своими наработками в области безопасности данных со всеми.

	После того, как вы авторизуетесь, вызовите это окно снова, чтобы увидеть перечень доступных вам команд, поскольку сейчас вы видите только список команд, доступных для всех посетителей, авторизованные пользователи имеют более широкий функционал.

	Отдельно хочу отметить специфическую реализацию в системе функционала синонимов вызываемых команд, а кое-какие из них даже имеют синтаксический сахар. Попробуйте посмотреть на синонимы разных команд (`aliases $cmd`, например `aliases help`) и вы сами всё поймёте. Например, цитату дня, которая используется в качестве эпиграфа, можно получить такими способами: `epigraph`, `quote`, `цитата` или даже `"цитата дня"`. Если вы создадите или возьмете из репозитория исполняемый файл с названием, которое уже имеется в списке псевдонимов, то псевдоним будет проигнорирован, будет выполнена команда имеющая исполняемый файл со своим именем. Так что ни один псевдоним не может перезаписать название реальной функции и подменить оригинал, help всегда останется help-ом. Для того, чтобы изменить функционал по умолчанию для существующей команды нужно будет ковырять файлы программы.

	<em><b>Будьте бдительны, если передаваемый аргумент должен содержать пробел, заключите его в одинарные или двойные кавычки; косые кавычки используются для выполнения команды, которая в них заключена и возвращения результата её выполнения качестве передаваемого аргумента в другую команду. Если в выражение, заключенное в одинарные кавычки нужно добавить выражение в двойных кавычках, их не требуется экранировать, обратное также верно. Однако если вам понадобится указать двойные кавычки в выражении заключенном в двойные кавычки, их нужно экранировать обратным слешем вот так: \\", при этом слеш не добавится к строке. если же вам необходимо использовать слеш в конце строки, вам необходимо экранировать сам слеш вот так: \\\\", тогда у вас стрка закончится на слеш. если у вас строка вида "C:\\\\", вам достаточно указать два слеша, обратные слеши не нужно экранировать до тех пор, пока их не будет нечетное количество в конце строки, но даже при этом экранировать нужно будет только последний слеш. то есть любое количество обратных слешей будет просто добавлено как есть, кроме последнего нечетного, он будет сьеден и к строке добавится кавычка, если вы не проэкранируете его. Кроме того у eval и shell несколько специфическая интерпретация введённых команд, кавычки могут чудесным образом вырезаться там, где это не должно происходить. Довести все эти моменты до ума находится в первоочередных задачах, когда это произойдёт данное уведомление исчезнет.</b></em>

	Приятной работы!';

			$return .=  "\n\nПеречень доступных клавиатурных сочетаний и горячих клавиш в этом окне:\n\n";

			$return .= "<style>.help_table td {padding: 5px 10px;} .help_table tr:nth-child(2n) {background-color:rgba(255,255,255,0.05);} .help_table, .help_table * { box-sizing: border-box; } .help_table { max-width: 51em;
	    box-sizing: border-box;
	    font-size: 13px; }</style>";
			$return .= "<table class=\"help_table\"><tbody valign=\"top\">";
			$return .= "<tr style=\"color:green\"><td><b>Сочетание&nbsp;клавиш</b></td><td><b>Действие</b></td></tr>";
			foreach ($hotkeys[ $_SESSION['lang'] ] as $hotkey => $description) {
				$return .= "<tr><td>$hotkey</td><td>$description</td></tr>";
			}
			$return .= "</tbody></table>";

			$return .=  "\nПеречень всех доступных скриптов (в квадратных скобках указываются необязательные параметры):\n\n";

			ksort($commands['summary']['ru'][ $_SESSION['status'] ]);

			# после выхода стираются все данные сессии, однако при новом запросе status устанавливается в ghost
			$return .= "<table class=\"help_table\"><tbody valign=\"top\">";
			$return .= "<tr style=\"color:green\"><td><b>Имя&nbsp;скрипта</b></td><td><b>Параметры</b></td><td><b>Краткое&nbsp;описание</b></td></tr>";
			foreach ($commands['summary'][ $_SESSION['lang'] ][ $_SESSION['status'] ] as $command => $description) {
				$arguments = $commands['arguments'][$command];
				$return .= "<tr><td>$command</td><td>$arguments</td><td>$description</td></tr>";
			}
			$return .= "</tbody></table>";
		} else {
			$return .= "Справка по команде ${argv[1]}: " . $commands['summary'][ $_SESSION['lang'] ][ $_SESSION['status'] ][ $argv[1] ];
		}

		return $return;
	}